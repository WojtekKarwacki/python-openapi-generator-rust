from typing import Any

from {{fmtName module}}.{{fmtName feature}}.service import {{fmtClass feature}}Service

service={{fmtClass ../../feature}}Service()

{{#each ops}}{{#each this}}
def test_{{to_snake_case this.name}}({{#if this.req}}{{#if this.req.path}}{{fmtName (fmtType this.req)}}: {{fmtType this.req (to_pascal_case this.name)}}{{else if (or (eq this.req.type "obj") (eq this.req.type "seq") (eq this.req.type "map"))}}{{fmtName (add this.name "Req")}}: {{>dtoName val=(fmtClass (add this.name "Req"))}}{{else}}request: {{fmtType this.req}}{{/if}}{{#if (eq this.req.form "multipart/form-data")}}, file: BufferedReader{{/if}} = {{>stubImpl val=this.req key="Req"}}{{/if}}{{#if this.params}}{{#if this.req}}, {{/if}}{{#each (sortOptionalsLast this.params)}}{{to_snake_case this.name}}: {{fmtType this}} = {{>stubImpl val=this key=this.name}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}) -> None:
    service.{{to_snake_case this.name}}({{#if this.req}}{{#if this.req.path}}{{#with (resolveIfMappedType (fmtClass this.req.path))}}{{fmtName ../req.path}}_to_{{fmtName this}}({{fmtName (fmtType ../req)}}){{else}}{{fmtName (fmtType this.req)}}{{/with}}{{else if (or (eq this.req.type "obj") (eq this.req.type "seq") (eq this.req.type "map"))}}{{fmtName (add this.name "Req")}}{{else}}request{{/if}}{{#if (eq this.req.form "multipart/form-data")}}, file{{/if}}{{/if}}{{#if this.params}}{{#if this.req}}, {{/if}}{{#each (sortOptionalsLast this.params)}}{{to_snake_case this.name}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}})
{{/each}}{{/each}}
