{{#if (and val.path (not (eq val.type "alias")))}}{{#with (resolve val)}}{{#if (eq this.type "obj")}}{{#if this.adt}}{{>dtoName val=(fmtClass (fmtName ../val.path))}}Base{{else}}{{>dtoName val=(fmtClass ../val.path)}}{{/if}}.get(){{else}}{{>stubImpl val=this indent=indent}}{{/if}}{{/with}}{{else if (or (eq val.type "obj") (or val.vars val.mix))}}{{key}}({{#each val.vars}}
    {{../indent}}    {{fmtName @key}}={{>stubImpl val=this key=(fmtClass @key) indent=(add ../indent "    ") prefix=../key}}{{#if (or (not @last) ../val.mix)}},{{/if}}{{/each}}{{#each val.mix}}
    {{../indent}}    **{{#if ../adtVar}}{ k:v for k, v in {{/if}}{{>dtoName val=(fmtClass this.path)}}.get().dict(){{#if ../adtVar}}.items() if k != {{json (fmtName ../adtVar)}} }{{/if}}{{#unless @last}},{{/unless}}{{/each}}
{{indent}}){{else if (eq val.type "map")}}{ {{#if val.key}}{{#if (eq val.key.type "obj")}}{{#if prefix}}{{prefix}}.{{/if}}{{add key "Key"}}.get(){{else}}{{>stubImpl val=val.item indent=indent prefix=null}}{{/if}}{{else}}{{>stubImpl val="str" key=(add key "Key") indent=indent}}{{/if}}: {{#if val.val}}{{#if (eq val.val.type "obj")}}{{#if prefix}}{{prefix}}.{{/if}}{{add key "Val"}}.get(){{else}}{{>stubImpl val=val.val indent=indent prefix=null}}{{/if}}{{else}}{{>stubImpl val="str" key=(add key "Val") indent=indent}}{{/if}} }{{else if (eq val.type "seq")}}[{{#if (eq val.item.type "obj")}}{{#if prefix}}{{prefix}}.{{/if}}{{#if origin}}{{>dtoName val=(fmtClass origin.path)}}{{/if}}{{add key "Item"}}.get(){{else}}{{>stubImpl val=val.item indent=indent prefix=prefix}}{{/if}}]{{else}}{{stubImpl val indent=indent}}{{/if}}