from .service import {{to_pascal_case feature}}Service

from fastapi import APIRouter, Depends, Path, Query, Response
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse, StreamingResponse

from typing import Annotated, Any

{{to_snake_case feature}}_router = APIRouter()

{{#each ops}}{{#each this}}
@{{to_snake_case ../../feature}}_router.{{to_lower_case this.type}}(
    "{{#if ../../useNamespace}}/{{to_kebab_case ../../feature}}{{/if}}{{@../key}}"{{#unless this.res}}, status_code=204, response_class=Response{{/unless}}{{#if this.res.meta}},
responses={200: {"headers": { {{#each this.res.meta}}"{{@key}}": {"schema": {"type": "string"{{#if (eq this.type "const")}}, "const": "{{#each this.val}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}"{{/if}} }}{{/each}} }}}{{/if}}
)
def {{to_snake_case this.name}}({{#if this.req}}{{#if this.req.path}}{{fmtName this.req.path}}: {{>dtoName val=(fmtClass this.req.path)}}{{else}}{{#if (eq this.req.form "multipart/form-data")}}{{fmtName (add this.name "Req")}}: {{>dtoName val=(fmtClass (add this.name "Req"))}} = Depends({{>dtoName val=(fmtClass (add this.name "Req"))}}.of_form){{else if (or (eq this.req.type "obj") (eq this.req.type "seq") (eq this.req.type "map"))}}{{fmtName (add this.name "Req")}}: {{>dtoName val=(fmtClass (add this.name "Req"))}}{{else}}request: {{fmtType this.req}}{{/if}}{{/if}}, {{/if}}{{#each (sortOptionalsLast this.params)}}{{to_snake_case this.name}}: Annotated[{{#if (and (hasKey this "default") (eq this.default null))}}{{fmtOpt (fmtType this)}}{{else}}{{fmtType this}}{{/if}}, {{fmtClass this.loc}}{{#if (ne (to_snake_case this.name) this.name)}}(alias = {{json this.name}}){{/if}}]{{#if (hasKey this "default")}} = {{fmtValue this.default}}{{/if}}, {{/each}}service: {{to_pascal_case ../../feature}}Service = Depends({{to_pascal_case ../../feature}}Service)) -> {{#with this.res}}{{#if (eq this.carrier "stream")}}Streaming{{else}}JSON{{/if}}Response{{else}}None{{/with}}:
    {{#if this.res}}content{{#if (filterNonconst this.res.meta)}}, headers{{/if}} = {{/if}}service.{{to_snake_case this.name}}({{#if this.req}}{{#if this.req.path}}{{#with (resolveIfMappedType (fmtClass this.req.path))}}{{fmtName ../req.path}}_to_{{fmtName this}}({{fmtName ../req.path}}){{else}}{{fmtName this.req.path}}{{/with}}{{else}}{{#if (or (eq this.req.form "multipart/form-data") (eq this.req.type "obj") (eq this.req.type "seq") (eq this.req.type "map"))}}{{fmtName (add this.name "Req")}}{{else}}request{{/if}}{{/if}}{{#if this.params}}, {{/if}}{{/if}}{{#each this.params}}{{to_snake_case this.name}}{{#unless @last}}, {{/unless}}{{/each}}){{#if this.res}}
    {{#with this.res}}{{#with (resolveIfMappedType (fmtClass this.path))}}content = {{fmtName this}}_to_{{fmtName ../path}}(content){{/with}}{{/with}}
    {{#unless (eq this.res.carrier "stream")}}content = jsonable_encoder(content){{/unless}}
    {{#with this.res}}response = {{#if (eq this.carrier "stream")}}Streaming{{else}}JSON{{/if}}Response(content=content{{#with this.form}}, media_type = "{{this}}"{{/with}}){{/with}}{{#each this.res.meta}}{{#if (eq this.type "const")}}
    response.headers["{{@key}}"] = "{{#each this.val}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}"{{/if}}{{/each}}{{#if (filterNonconst this.res.meta)}}
    response.headers.update(headers.to_dict()){{/if}}
    {{#if this.res}}return response{{/if}}
{{/if}}
{{/each}}{{/each}}
